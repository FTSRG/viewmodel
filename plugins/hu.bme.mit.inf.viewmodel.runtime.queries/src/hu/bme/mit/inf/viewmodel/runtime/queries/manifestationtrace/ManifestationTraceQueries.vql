package hu.bme.mit.inf.viewmodel.runtime.queries.manifestationtrace

import hu.bme.mit.inf.viewmodel.runtime.queries.logicmodel.eObjectConstantValue
import hu.bme.mit.inf.viewmodel.runtime.queries.logicmodel.javaObjectConstantValue
import hu.bme.mit.inf.viewmodel.runtime.queries.logicmodel.concreteRelation
import hu.bme.mit.inf.viewmodel.runtime.queries.logicmodel.concreteVariable

import "http://inf.mit.bme.hu/emf/2017/LogicModel"
import "http://www.eclipse.org/emf/2002/Ecore"

pattern manifestableRelation(TraceModelId : EString, LeftManifestation : InterpretedManifestation, RightManifestation : Manifestation, Relation : EStructuralFeature) {
	// Discourage the query optimizer from trying to caclulated the Cartesian product of
	// properlyManifested/3 with itself (TraceModelId is a very promising candidate to join on).
	find manifestableRelationLeft(TraceModelId, LeftManifestation, RightRep, Relation);
	find properlyManifested(TraceModelId, RightRep, RightManifestation);
}

private pattern manifestableRelationLeft(TraceModelId : EString, LeftManifestation : InterpretedManifestation, RightRep : Cluster, Relation : EStructuralFeature) {
	find concreteRelation(LeftRep, RightRep, Relation);
	find properlyManifested(TraceModelId, LeftRep, LeftManifestation);
}

pattern manifestableConcreteVariable(TraceModelId : EString, Rep : Cluster, Type : EClass) {
	find tracedCluster(TraceModelId, Rep);
	find concreteVariable(Rep, Type);
}

pattern manifestableEObjectConstantValue(TraceModelId : EString, Rep : Cluster, Value : EObject) {
	find tracedCluster(TraceModelId, Rep);
	find eObjectConstantValue(Rep, Value);
}

pattern manifestableJavaObjectConstantValue(TraceModelId : EString, Rep : Cluster, Value : EJavaObject) {
	find tracedCluster(TraceModelId, Rep);
	find javaObjectConstantValue(Rep, Value);
}

private pattern properlyManifested(TraceModelId : EString, Rep : Cluster, Man : Manifestation) {
	find manifestedCluster(TraceModelId, Rep, Man);
	find concreteVariable(Rep, Type);
	InterpretedManifestation.type(Man, Type);
} or {
	find manifestedCluster(TraceModelId, Rep, Man);
	find eObjectConstantValue(Rep, Value);
	UninterpretedManifestation.sourceEObject(Man, Value);
} or {
	find manifestedCluster(TraceModelId, Rep, Man);
	find javaObjectConstantValue(Rep, Value);
	PrimitiveManifestation.value(Man, Value);
}

private pattern manifestedCluster(TraceModelId : EString, Rep : Cluster, Manifestation : Manifestation) {
	find tracedCluster(TraceModelId, Rep);
	Cluster.manifestation(Rep, Manifestation);
}

private pattern tracedCluster(TraceModelId : EString, Rep : Cluster) {
	ManifestationTrace.traceModelId(Trace, TraceModelId);
	ManifestationTrace.logicModel.clusters(Trace, Rep);
}
