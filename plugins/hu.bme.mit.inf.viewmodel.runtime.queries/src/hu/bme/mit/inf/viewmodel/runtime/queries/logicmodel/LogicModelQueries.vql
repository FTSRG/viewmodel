package hu.bme.mit.inf.viewmodel.runtime.queries.logicmodel

import "http://inf.mit.bme.hu/emf/2017/LogicModel"
import "http://www.eclipse.org/emf/2002/Ecore"

import java org.apache.commons.lang.ClassUtils

//
// ECore queries
//

private pattern childEClass(Parent : EClass, Child : EClass) {
	EClass.eSuperTypes(Child, Parent);
}

pattern conformsTo(Ancestor : EClass, Child : EClass) {
	Ancestor == Child;
} or {
	find childEClass+(Ancestor, Child);
}

pattern hasEOpposite(Rel : EReference) {
	EReference.eOpposite(Rel, _);
}

pattern isContainment(Rel : EReference) {
	EReference.containment(Rel, true);
}

pattern uniqueName(Rel : EStructuralFeature, Name : java String) {
	EClass.eStructuralFeatures(Type, Rel);
	EPackage.eClassifiers(Package, Type);
	EPackage.nsURI(Package, NsUri);
	EClass.name(Type, ClassName);
	EStructuralFeature.name(Rel, RelName);
	Name == eval(NsUri + "#" + ClassName + "." + RelName);
}

pattern strongRelationLargerUpperBound(Rel : EReference) {
	EReference.eOpposite(Rel, Opposite);
	neg find isContainment(Rel);
	neg find isContainment(Opposite);
	EStructuralFeature.upperBound(Rel, RelBound);
	EStructuralFeature.upperBound(Opposite, OppositeBound);
	check(OppositeBound >= 0);
	check(RelBound < 0 || RelBound > OppositeBound);
}

pattern strongRelationEqualUpperBound(Rel : EReference) {
	EReference.eOpposite(Rel, Opposite);
	neg find isContainment(Rel);
	neg find isContainment(Opposite);
	EStructuralFeature.upperBound(Rel, RelBound);
	EStructuralFeature.upperBound(Opposite, OppositeBound);
	check((RelBound < 0 && OppositeBound < 0) || RelBound == OppositeBound);
	find uniqueName(Rel, RelName);
	find uniqueName(Opposite, OppositeName);
	check(RelName.compareTo(OppositeName) < 0);
}

pattern strongRelation(Rel : EStructuralFeature) {
	neg find hasEOpposite(Rel);
} or {
	find hasEOpposite(Rel);
	find isContainment(Rel);
} or {
	find strongRelationLargerUpperBound(Rel);
} or {
	find strongRelationEqualUpperBound(Rel);
}

//
// Clustering queries
//

pattern dirtyLogicModel(LogicModelId : EString) {
	find dirtyCluster(LogicModelId, _);
} or {
	find unusedCluster(LogicModelId, _);
}

pattern unusedCluster(LogicModelId : EString, Rep : Cluster) {
	LogicModel.logicModelId(Model, LogicModelId);
	LogicModel.clusters(Model, Rep);
	neg find representedVariable(Rep, _);
}

pattern dirtyCluster(LogicModelId : EString, Rep : Cluster) {
	LogicModel.logicModelId(Model, LogicModelId);
	LogicModel.clusters(Model, Rep);
	Cluster.state(Rep, ClusterState::DIRTY);
	find representedVariable(Rep, _);
}

pattern representedVariable(Rep : Cluster, Var : Variable) {
	Variable.cluster(Var, Rep);
}

pattern equivalenceConstraint(Left : Variable, Right : Variable) {
	EquivalenceConstraint.left(Constraint, Left);
	EquivalenceConstraint.right(Constraint, Right);
}

pattern anyEObjectConstantValue(Var : Variable, Value : EObject) {
	ConstantEObjectConstraint.variable(Const, Var);
	ConstantEObjectConstraint.value(Const, Value);
}

pattern anyJavaObjectConstantValue(Var : Variable, Value : EJavaObject) {
	ConstantJavaObjectConstraint.variable(Const, Var);
	ConstantJavaObjectConstraint.value(Const, Value);
}

pattern eObjectCluster(Model : LogicModel, Rep : Cluster, Value : EObject) {
	LogicModel.clusters(Model, Rep);
	find anyEObjectConstantValue(Var, Value);
	find representedVariable(Rep, Var);
}

pattern javaObjectCluster(Model : LogicModel, Rep : Cluster, Value : EJavaObject) {
	LogicModel.clusters(Model, Rep);
	find anyJavaObjectConstantValue(Var, Value);
	find representedVariable(Rep, Var);
}

pattern strongClusterRelation(LeftRep : Cluster, RightRep : Cluster, Rel : EStructuralFeature) {
	find clusterRelation(LeftRep, RightRep, Rel);
	find strongRelation(Rel);
}

pattern clusterRelation(LeftRep : Cluster, RightRep : Cluster, Rel : EStructuralFeature) {
	find representedVariable(LeftRep, Left);
	find representedVariable(RightRep, Right);
	find variableRelation(Left, Right, Rel);
} or {
	find representedVariable(LeftRep, Left);
	find representedVariable(RightRep, Right);
	find variableRelation(Right, Left, Opposite);
	EReference.eOpposite(Rel, Opposite);
}

private pattern variableRelation(Left : Variable, Right : Variable, Relation : EStructuralFeature) {
	RelationConstraint.left(Constraint, Left);
	RelationConstraint.right(Constraint, Right);
	RelationConstraint.targetRelation(Constraint, Relation);
}

//
// LogicModel queries
//

pattern concreteRelation(LeftRep : Cluster, RightRep : Cluster, Rel : EStructuralFeature) {
	find strongClusterRelation(LeftRep, RightRep, Rel);
	N == count find clusterRelation(LeftRep, _, Rel);
	EStructuralFeature.upperBound(Rel, Bound);
	check(Bound < 0 || Bound >= 1 || N <= 1);
	find strongRelationOppositeAllowed(RightRep, Rel);
	find strongRelationContainmentAllowed(RightRep, Rel);
}

private pattern strongRelationOppositeAllowed(RightRep : Cluster, Rel : EStructuralFeature) {
	find strongClusterRelation(_, RightRep, Rel);
	neg find hasEOpposite(Rel);
} or {
	find strongClusterRelation(_, RightRep, Rel);
	neg find constantEObjectConstraint(RightRep, _);
	neg find constantJavaObjectConstraint(RightRep, _);
	N == count find clusterRelation(_, RightRep, Rel);
	EReference.eOpposite.upperBound(Rel, Bound);
	check(Bound < 0 || Bound >= 1 || N <= 1);
}

private pattern strongRelationContainmentAllowed(RightRep : Cluster, Rel : EStructuralFeature) {
	find strongClusterRelation(_, RightRep, Rel);
	neg find isContainment(Rel);
} or {
	find strongClusterRelation(_, RightRep, Rel);
	1 == count find containmentClusterRelation(_, RightRep, _);
}

private pattern containmentClusterRelation(LeftRep : Cluster, RightRep : Cluster, Rel : EReference) {
	find strongClusterRelation(LeftRep, RightRep, Rel);
	find isContainment(Rel);
}

pattern concreteVariable(Rep : Cluster, Type : EClass) {
	neg find constantEObjectConstraint(Rep, _);
	neg find javaObjectConstantValue(Rep, _);
	find concreteClusterType(Rep, Type);
}

//
// Type derivation queries
//

pattern eObjectConstantValue(Rep : Cluster, Value : EObject) {
	neg find constantJavaObjectConstraint(Rep, _);
	1 == count find constantEObject(Rep, _);
	find constantEObjectConstraint(Rep, Const);
	neg find typeConstraintViolatingConstant(Rep, Const);
	ConstantEObjectConstraint.value(Const, Value);
}

pattern javaObjectConstantValue(Rep : Cluster, Value : java Object) {
	neg find requiredClusterType(Rep, _);
	neg find constantEObjectConstraint(Rep, _);
	1 == count find constantJavaObject(Rep, _);
	find constantJavaObjectConstraint(Rep, Const);
	neg find javaTypeConstraintViolatingConstant(Rep, Const);
	ConstantJavaObjectConstraint.value(Const, Value);
}

private pattern typeConstraintViolatingConstant(Rep : Cluster, Const : ConstantEObjectConstraint) {
	find constantEObjectConstraint(Rep, Const);
	ConstantEObjectConstraint.valueType(Const, Type);
	find requiredClusterType(Rep, SuperType);
	neg find conformsTo(SuperType, Type);
}

private pattern javaTypeConstraintViolatingConstant(Rep : Cluster, Const : ConstantJavaObjectConstraint) {
	find constantJavaObjectConstraint(Rep, Const);
	ConstantJavaObjectConstraint.valueType(Const, JavaType);
	find requiredJavaClusterType(Rep, RequiredType);
	// HACK Evil casting to work around code generation issue in requiredJavaClusterType/2.
	check(!(RequiredType as Class<?>).isAssignableFrom(JavaType));
}

private pattern constantEObject(Rep : Cluster, Value : EObject) {
	find constantEObjectConstraint(Rep, Const);
	ConstantEObjectConstraint.value(Const, Value);
}

private pattern constantEObjectConstraint(Rep : Cluster, Const : ConstantEObjectConstraint) {
	find representedVariable(Rep, Var);
	ConstantEObjectConstraint.variable(Const, Var);
}

private pattern constantJavaObject(Rep : Cluster, Value : java Object) {
	find constantJavaObjectConstraint(Rep, Const);
	ConstantJavaObjectConstraint.value(Const, Value);
}

private pattern constantJavaObjectConstraint(Rep : Cluster, Const : ConstantJavaObjectConstraint) {
	find representedVariable(Rep, Var);
	ConstantJavaObjectConstraint.variable(Const, Var);
}

pattern concreteClusterType(Rep : Cluster, Type : EClass) {
	find commonConcreteSubtypeOfTypes(Rep, Type);
	neg find notHighestCommonConcreteSubtypeOfTypes(Rep, Type);
}

private pattern notHighestCommonConcreteSubtypeOfTypes(Rep : Cluster, Type : EClass) {
	find commonConcreteSubtypeOfTypes(Rep, Type);
	find commonConcreteSubtypeOfTypes(Rep, OtherType);
	neg find conformsTo(Type, OtherType);
}

private pattern commonConcreteSubtypeOfTypes(Rep : Cluster, Type : EClass) {
	find concreteSubtypeOfClusterType(Rep, Type);
	neg find notACommonConcreteSubtypeOfPossibleTypes(Rep, Type);
}

private pattern notACommonConcreteSubtypeOfPossibleTypes(Rep : Cluster, Type : EClass) {
	find concreteSubtypeOfClusterType(Rep, Type);
	find requiredClusterType(Rep, PossibleType);
	neg find conformsTo(PossibleType, Type);
}

private pattern concreteSubtypeOfClusterType(Rep : Cluster, Type : EClass) {
	find requiredClusterType(Rep, SuperType);
	find conformsTo(SuperType, Type);
	EClass.abstract(Type, false);
}

pattern requiredClusterType(Rep : Cluster, Type : EClass) {
	find representedVariable(Rep, Var);
	EClassConstraint.variable(Constraint, Var);
	EClassConstraint.targetEClass(Constraint, Type);
} or {
	find clusterRelation(Rep, _, Ref);
	EStructuralFeature.eContainingClass(Ref, Type); 
} or {
	find clusterRelation(_, Rep, Ref);
	EStructuralFeature.eType(Ref, Type); 
}

pattern requiredJavaClusterTypeOrPrimitive(Rep : Cluster, JavaType : java Object) {
	find clusterRelation(_, Rep, Ref);
	EStructuralFeature.eType(Ref, Type);
	EDataType(Type);
	EClassifier.instanceClass(Type, JavaType);
} or {
	find representedVariable(Rep, Var);
	JavaClassConstraint.variable(Const, Var);
	JavaClassConstraint.targetClass(Const, JavaType);
}

pattern requiredJavaClusterType(Rep : Cluster, JavaType : java Object) {
	find requiredJavaClusterTypeOrPrimitive(Rep, JavaTypeOrPrimitive);
	// Added casts to avoid errors in the VIATRA Maven build.
	JavaType == eval(ClassUtils.primitiveToWrapper(JavaTypeOrPrimitive as Class<?>) as Object);
}

