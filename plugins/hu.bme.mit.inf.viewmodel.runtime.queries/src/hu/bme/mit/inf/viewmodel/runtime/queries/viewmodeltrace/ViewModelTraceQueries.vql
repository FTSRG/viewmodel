package hu.bme.mit.inf.viewmodel.runtime.queries.viewmodeltrace

import "http://inf.mit.bme.hu/emf/2017/LogicModel"
import "http://inf.mit.bme.hu/emf/2017/ViewModelTrace"
import "http://www.eclipse.org/emf/2002/Ecore"

import hu.bme.mit.inf.viewmodel.runtime.queries.logicmodel.dirtyLogicModel
import hu.bme.mit.inf.viewmodel.runtime.queries.logicmodel.representedVariable

pattern namedTrace(TraceModelId : EString, Name : EString, Tuple : MatchArgumentTuple, Trace : Trace) {
	ViewModelTrace.traceModelId(TraceModel, TraceModelId);
	ViewModelTrace.traces(TraceModel, Trace);
	Trace.traceName(Trace, Name);
	Trace.argumentTuple(Trace, Tuple);
}

// Value : java Object omitted deliberately so that no TypeFilterConstraint is generated.
pattern namedMatchArgument(Tuple : MatchArgumentTuple, Name : EString, Value) {
	MatchArgumentTuple.elements(Tuple, Element);
	MatchArgument.parameterName(Element, Name);
	find matchArgument(Element, Value);
}

private pattern matchArgument(Element : MatchArgument, Value) {
	EObjectMatchArgument.value(Element, Value);
} or {
	JavaObjectMatchArgument.value(Element, Value);
}

pattern dirtyViewModelTraceModel(TraceModelId : EString) {
	ViewModelTrace.traceModelId(TraceModel, TraceModelId);
	ViewModelTrace.logicModel.logicModelId(TraceModel, LogicModelId);
	find dirtyLogicModel(LogicModelId);
} or {
	find lonelyVariable(TraceModelId, _);
} or {
	find unusedTrace(TraceModelId, _);
}

pattern lonelyVariable(TraceModelId : EString, Var : Variable) {
	ViewModelTrace.traceModelId(TraceModel, TraceModelId);
	ViewModelTrace.traces(TraceModel, Trace);
	Trace.state(Trace, TraceState::USED);
	find tracedVariable(Trace, Var);
	neg find representedVariable(_, Var);
}

private pattern tracedVariable(Trace : Trace, Var : Variable) {
	VariableInstantiationTrace.variables.value(Trace, Var);
} or {
	ConstraintTrace.localVariables(Trace, Var);
}

pattern unusedVariableInstantiationTrace(TraceModelId : EString, Trace : VariableInstantiationTrace) {
	find unusedTrace(TraceModelId, Trace);
	VariableInstantiationTrace(Trace);
}

pattern unusedConstraintTrace(TraceModelId : EString, Trace : ConstraintTrace) {
	find unusedTrace(TraceModelId, Trace);
	ConstraintTrace(Trace);
}

pattern unusedTrace(TraceModelId : EString, Trace : Trace) {
	ViewModelTrace.traceModelId(TraceModel, TraceModelId);
	ViewModelTrace.traces(TraceModel, Trace);
	Trace.state(Trace, TraceState::UNUSED);
}

