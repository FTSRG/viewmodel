/********************************************************************************
 * Copyright (c) 2018 Contributors to the ViewModel project
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * SPDX-License-Identifier: EPL-1.0
 ********************************************************************************/
package hu.bme.mit.inf.viewmodel.benchmarks.viewmodel.stochasticpetrinet

import hu.bme.mit.inf.viewmodel.benchmarks.queries.stochasticpetrinet.*

rule railwayContainer(_) => createPetriNet(_);

rule route(Container, _) => createRoute(Net, _, _, _) {
	lookup railwayContainer(Container) => (Net);
}

rule failedRoute(Container, Route) => setInitialMarking(Failed) {
	lookup route(Container, Route) => (_, _, Failed, _);
}

rule operationalRoute(Container, Route) => setInitialMarking(Operational) {
	lookup route(Container, Route) => (_, Operational, _, _);
}

rule railwayElementWithFailureModel(Container, _) => createFailureModel(Net, _, _) {
	lookup railwayContainer(Container) => (Net);
}

rule failedRailwayElementWithFailureModel(Container, Element) => setInitialMarking(Failed) {
	lookup railwayElementWithFailureModel(Container, Element) => (_, _, Failed);
}

rule operationalRailwayElementWithFailureModel(Container, Element) => setInitialMarking(Operational) {
	lookup railwayElementWithFailureModel(Container, Element) => (_, Operational, _);
}

rule routeRequiresElement(Container, Route, Element)
	=> connectRequiredElement(Net, ElementUp, ElementDown, RouteUp, RouteDown, RouteRepair) {
	lookup route(Container, Route) => (Net, RouteUp, RouteDown, RouteRepair);
	lookup railwayElementWithFailureModel(Container, Element) => (_, ElementUp, ElementDown);
}
