<?xml version="1.0" encoding="ASCII"?>
<sdmUtil:CompilerInjection xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:sdmUtil="platform:/plugin/SDMLanguage/model/SDMLanguage.ecore#//sdmUtil">
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Route"/>
  </importInjectionEntries>
  <importInjectionEntries content="hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet.csp.constraints.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Route"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Route"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Route"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Region"/>
  </importInjectionEntries>
  <importInjectionEntries content="hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet.csp.constraints.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Region"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Region"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Region"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Switch"/>
  </importInjectionEntries>
  <importInjectionEntries content="hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet.csp.constraints.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Switch"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Switch"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Switch"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RailwayContainer"/>
  </importInjectionEntries>
  <importInjectionEntries content="hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet.csp.constraints.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RailwayContainer"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RailwayContainer"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RailwayContainer"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/SwitchPosition"/>
  </importInjectionEntries>
  <importInjectionEntries content="hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet.csp.constraints.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/SwitchPosition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/SwitchPosition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/SwitchPosition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Semaphore"/>
  </importInjectionEntries>
  <importInjectionEntries content="hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet.csp.constraints.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Semaphore"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Semaphore"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Semaphore"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Sensor"/>
  </importInjectionEntries>
  <importInjectionEntries content="hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet.csp.constraints.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Sensor"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Sensor"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Sensor"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredSwitch"/>
  </importInjectionEntries>
  <importInjectionEntries content="hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet.csp.constraints.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredSwitch"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredSwitch"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredSwitch"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredSensor"/>
  </importInjectionEntries>
  <importInjectionEntries content="hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet.csp.constraints.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredSensor"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredSensor"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredSensor"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Segment"/>
  </importInjectionEntries>
  <importInjectionEntries content="hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet.csp.constraints.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Segment"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Segment"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Segment"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredEntrySemaphore"/>
  </importInjectionEntries>
  <importInjectionEntries content="hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet.csp.constraints.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredEntrySemaphore"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredEntrySemaphore"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredEntrySemaphore"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/SensorMonitors"/>
  </importInjectionEntries>
  <importInjectionEntries content="hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet.csp.constraints.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/SensorMonitors"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/SensorMonitors"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/SensorMonitors"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/TrackElementConnectsTo"/>
  </importInjectionEntries>
  <importInjectionEntries content="hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet.csp.constraints.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/TrackElementConnectsTo"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/TrackElementConnectsTo"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/TrackElementConnectsTo"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredExitSemaphore"/>
  </importInjectionEntries>
  <importInjectionEntries content="hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet.csp.constraints.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredExitSemaphore"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredExitSemaphore"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredExitSemaphore"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Route"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Route"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Route"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Route"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Region"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Region"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Region"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Region"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Switch"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Switch"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Switch"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Switch"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RailwayContainer"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RailwayContainer"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RailwayContainer"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RailwayContainer"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/SwitchPosition"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/SwitchPosition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/SwitchPosition"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/SwitchPosition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Semaphore"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Semaphore"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Semaphore"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Semaphore"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Sensor"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Sensor"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Sensor"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Sensor"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredSwitch"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredSwitch"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredSwitch"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredSwitch"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredSensor"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredSensor"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredSensor"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredSensor"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Segment"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Segment"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Segment"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Segment"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredEntrySemaphore"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredEntrySemaphore"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredEntrySemaphore"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredEntrySemaphore"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/SensorMonitors"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/SensorMonitors"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/SensorMonitors"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/SensorMonitors"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/TrackElementConnectsTo"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/TrackElementConnectsTo"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/TrackElementConnectsTo"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/TrackElementConnectsTo"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredExitSemaphore"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredExitSemaphore"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredExitSemaphore"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredExitSemaphore"/>
  </importInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Route/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;srcContainer&quot;, srcContainer);&#xA;match.registerObject(&quot;srcRoute&quot;, srcRoute);&#xA;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Route/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Route/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;srcContainer&quot;,srcContainer);&#xA;isApplicableMatch.registerObject(&quot;containerCorr&quot;,containerCorr);&#xA;isApplicableMatch.registerObject(&quot;trgPetrinet&quot;,trgPetrinet);&#xA;isApplicableMatch.registerObject(&quot;srcRoute&quot;,srcRoute);&#xA;return csp;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Route/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Route/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;routeFailedCorr&quot;, routeFailedCorr);&#xA;ruleresult.registerObject(&quot;trgOperational&quot;, trgOperational);&#xA;ruleresult.registerObject(&quot;routeRepairCorr&quot;, routeRepairCorr);&#xA;ruleresult.registerObject(&quot;trgFailed&quot;, trgFailed);&#xA;ruleresult.registerObject(&quot;srcContainer&quot;, srcContainer);&#xA;ruleresult.registerObject(&quot;trgFailedToRepair&quot;, trgFailedToRepair);&#xA;ruleresult.registerObject(&quot;containerCorr&quot;, containerCorr);&#xA;ruleresult.registerObject(&quot;trgPetrinet&quot;, trgPetrinet);&#xA;ruleresult.registerObject(&quot;trgRepairToOperational&quot;, trgRepairToOperational);&#xA;ruleresult.registerObject(&quot;trgRepair&quot;, trgRepair);&#xA;ruleresult.registerObject(&quot;srcRoute&quot;, srcRoute);&#xA;ruleresult.registerObject(&quot;routeOperationalCorr&quot;, routeOperationalCorr);&#xA;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Route/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;srcRoute&quot;).eClass()).equals(&quot;railway.Route.&quot;);">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Route/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Region/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;srcRegion&quot;, srcRegion);&#xA;match.registerObject(&quot;srcContainer&quot;, srcContainer);&#xA;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Region/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Region/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;srcRegion&quot;,srcRegion);&#xA;isApplicableMatch.registerObject(&quot;srcContainer&quot;,srcContainer);&#xA;return csp;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Region/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Region/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;srcRegion&quot;, srcRegion);&#xA;ruleresult.registerObject(&quot;srcContainer&quot;, srcContainer);&#xA;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Region/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;srcRegion&quot;).eClass()).equals(&quot;railway.Region.&quot;);">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Region/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Switch/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;srcSwitch&quot;, srcSwitch);&#xA;match.registerObject(&quot;srcContainer&quot;, srcContainer);&#xA;match.registerObject(&quot;srcRegion&quot;, srcRegion);&#xA;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Switch/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Switch/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_srcSwitch_currentPosition = CSPFactoryHelper.eINSTANCE.createVariable(&quot;srcSwitch.currentPosition&quot;, true, csp);&#xA;var_srcSwitch_currentPosition.setValue(srcSwitch.getCurrentPosition());&#xA;var_srcSwitch_currentPosition.setType(&quot;railway.Position&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_trgOperational_tokens = CSPFactoryHelper.eINSTANCE.createVariable(&quot;trgOperational.tokens&quot;, csp);&#xA;var_trgOperational_tokens.setType(&quot;int&quot;);&#xA;Variable var_trgFailed_tokens = CSPFactoryHelper.eINSTANCE.createVariable(&quot;trgFailed.tokens&quot;, csp);&#xA;var_trgFailed_tokens.setType(&quot;int&quot;);&#xA;&#xA;// Create constraints&#xA;PositionToMarking positionToMarking = new PositionToMarking();&#xA;&#xA;&#xA;csp.getConstraints().add(positionToMarking);&#xA;&#xA;// Solve CSP&#xA;positionToMarking.setRuleName(&quot;NoRuleName&quot;);&#xA;positionToMarking.solve(var_srcSwitch_currentPosition,var_trgOperational_tokens,var_trgFailed_tokens);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;trgPetrinet&quot;,trgPetrinet);&#xA;isApplicableMatch.registerObject(&quot;containerCorr&quot;,containerCorr);&#xA;isApplicableMatch.registerObject(&quot;srcSwitch&quot;,srcSwitch);&#xA;isApplicableMatch.registerObject(&quot;srcContainer&quot;,srcContainer);&#xA;isApplicableMatch.registerObject(&quot;srcRegion&quot;,srcRegion);&#xA;return csp;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Switch/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Switch/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;trgOperational&quot;, trgOperational);&#xA;ruleresult.registerObject(&quot;trgFailed&quot;, trgFailed);&#xA;ruleresult.registerObject(&quot;trgRepair&quot;, trgRepair);&#xA;ruleresult.registerObject(&quot;trgFailedToRepair&quot;, trgFailedToRepair);&#xA;ruleresult.registerObject(&quot;trgRepairToOperational&quot;, trgRepairToOperational);&#xA;ruleresult.registerObject(&quot;trgFailToFailed&quot;, trgFailToFailed);&#xA;ruleresult.registerObject(&quot;trgFail&quot;, trgFail);&#xA;ruleresult.registerObject(&quot;trgOperationToFail&quot;, trgOperationToFail);&#xA;ruleresult.registerObject(&quot;trgPetrinet&quot;, trgPetrinet);&#xA;ruleresult.registerObject(&quot;containerCorr&quot;, containerCorr);&#xA;ruleresult.registerObject(&quot;srcSwitch&quot;, srcSwitch);&#xA;ruleresult.registerObject(&quot;switchFailedCorr&quot;, switchFailedCorr);&#xA;ruleresult.registerObject(&quot;srcContainer&quot;, srcContainer);&#xA;ruleresult.registerObject(&quot;switchOperationalCorr&quot;, switchOperationalCorr);&#xA;ruleresult.registerObject(&quot;srcRegion&quot;, srcRegion);&#xA;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Switch/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;srcSwitch&quot;).eClass()).equals(&quot;railway.Switch.&quot;);">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Switch/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RailwayContainer/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;srcContainer&quot;, srcContainer);&#xA;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RailwayContainer/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RailwayContainer/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;srcContainer&quot;,srcContainer);&#xA;return csp;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RailwayContainer/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RailwayContainer/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;containerCorr&quot;, containerCorr);&#xA;ruleresult.registerObject(&quot;srcContainer&quot;, srcContainer);&#xA;ruleresult.registerObject(&quot;trgPetrinet&quot;, trgPetrinet);&#xA;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RailwayContainer/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;srcContainer&quot;).eClass()).equals(&quot;railway.RailwayContainer.&quot;);">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RailwayContainer/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/SwitchPosition/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;srcSwitchPosition&quot;, srcSwitchPosition);&#xA;match.registerObject(&quot;srcSwitch&quot;, srcSwitch);&#xA;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/SwitchPosition/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/SwitchPosition/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;srcSwitchPosition&quot;,srcSwitchPosition);&#xA;isApplicableMatch.registerObject(&quot;srcSwitch&quot;,srcSwitch);&#xA;return csp;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/SwitchPosition/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/SwitchPosition/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;srcSwitchPosition&quot;, srcSwitchPosition);&#xA;ruleresult.registerObject(&quot;srcSwitch&quot;, srcSwitch);&#xA;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/SwitchPosition/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;srcSwitchPosition&quot;).eClass()).equals(&quot;railway.SwitchPosition.&quot;);">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/SwitchPosition/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Semaphore/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;srcRegion&quot;, srcRegion);&#xA;match.registerObject(&quot;srcSemaphore&quot;, srcSemaphore);&#xA;match.registerObject(&quot;srcContainer&quot;, srcContainer);&#xA;match.registerObject(&quot;srcSegment&quot;, srcSegment);&#xA;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Semaphore/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Semaphore/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_srcSemaphore_signal = CSPFactoryHelper.eINSTANCE.createVariable(&quot;srcSemaphore.signal&quot;, true, csp);&#xA;var_srcSemaphore_signal.setValue(srcSemaphore.getSignal());&#xA;var_srcSemaphore_signal.setType(&quot;railway.Signal&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_trgOperational_tokens = CSPFactoryHelper.eINSTANCE.createVariable(&quot;trgOperational.tokens&quot;, csp);&#xA;var_trgOperational_tokens.setType(&quot;int&quot;);&#xA;Variable var_trgFailed_tokens = CSPFactoryHelper.eINSTANCE.createVariable(&quot;trgFailed.tokens&quot;, csp);&#xA;var_trgFailed_tokens.setType(&quot;int&quot;);&#xA;&#xA;// Create constraints&#xA;SignalToMarking signalToMarking = new SignalToMarking();&#xA;&#xA;&#xA;csp.getConstraints().add(signalToMarking);&#xA;&#xA;// Solve CSP&#xA;signalToMarking.setRuleName(&quot;NoRuleName&quot;);&#xA;signalToMarking.solve(var_srcSemaphore_signal,var_trgOperational_tokens,var_trgFailed_tokens);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;srcRegion&quot;,srcRegion);&#xA;isApplicableMatch.registerObject(&quot;srcSemaphore&quot;,srcSemaphore);&#xA;isApplicableMatch.registerObject(&quot;containerCorr&quot;,containerCorr);&#xA;isApplicableMatch.registerObject(&quot;srcContainer&quot;,srcContainer);&#xA;isApplicableMatch.registerObject(&quot;srcSegment&quot;,srcSegment);&#xA;isApplicableMatch.registerObject(&quot;trgPetrinet&quot;,trgPetrinet);&#xA;return csp;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Semaphore/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Semaphore/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;trgFailed&quot;, trgFailed);&#xA;ruleresult.registerObject(&quot;srcRegion&quot;, srcRegion);&#xA;ruleresult.registerObject(&quot;trgFailedToRepair&quot;, trgFailedToRepair);&#xA;ruleresult.registerObject(&quot;trgRepair&quot;, trgRepair);&#xA;ruleresult.registerObject(&quot;trgOperationToFail&quot;, trgOperationToFail);&#xA;ruleresult.registerObject(&quot;srcSemaphore&quot;, srcSemaphore);&#xA;ruleresult.registerObject(&quot;trgFail&quot;, trgFail);&#xA;ruleresult.registerObject(&quot;containerCorr&quot;, containerCorr);&#xA;ruleresult.registerObject(&quot;srcContainer&quot;, srcContainer);&#xA;ruleresult.registerObject(&quot;semaphoreOperationalCorr&quot;, semaphoreOperationalCorr);&#xA;ruleresult.registerObject(&quot;trgRepairToOperational&quot;, trgRepairToOperational);&#xA;ruleresult.registerObject(&quot;trgFailToFailed&quot;, trgFailToFailed);&#xA;ruleresult.registerObject(&quot;srcSegment&quot;, srcSegment);&#xA;ruleresult.registerObject(&quot;trgPetrinet&quot;, trgPetrinet);&#xA;ruleresult.registerObject(&quot;trgOperational&quot;, trgOperational);&#xA;ruleresult.registerObject(&quot;semaphoreFailedCorr&quot;, semaphoreFailedCorr);&#xA;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Semaphore/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;srcSemaphore&quot;).eClass()).equals(&quot;railway.Semaphore.&quot;);">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Semaphore/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Sensor/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;srcSensor&quot;, srcSensor);&#xA;match.registerObject(&quot;srcRegion&quot;, srcRegion);&#xA;match.registerObject(&quot;srcContainer&quot;, srcContainer);&#xA;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Sensor/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Sensor/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;containerCorr&quot;,containerCorr);&#xA;isApplicableMatch.registerObject(&quot;srcSensor&quot;,srcSensor);&#xA;isApplicableMatch.registerObject(&quot;srcRegion&quot;,srcRegion);&#xA;isApplicableMatch.registerObject(&quot;trgPetrinet&quot;,trgPetrinet);&#xA;isApplicableMatch.registerObject(&quot;srcContainer&quot;,srcContainer);&#xA;return csp;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Sensor/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Sensor/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;trgFailToFailed&quot;, trgFailToFailed);&#xA;ruleresult.registerObject(&quot;trgFail&quot;, trgFail);&#xA;ruleresult.registerObject(&quot;sensorFailedCorr&quot;, sensorFailedCorr);&#xA;ruleresult.registerObject(&quot;trgOperationToFail&quot;, trgOperationToFail);&#xA;ruleresult.registerObject(&quot;trgFailedToRepair&quot;, trgFailedToRepair);&#xA;ruleresult.registerObject(&quot;containerCorr&quot;, containerCorr);&#xA;ruleresult.registerObject(&quot;srcSensor&quot;, srcSensor);&#xA;ruleresult.registerObject(&quot;trgRepair&quot;, trgRepair);&#xA;ruleresult.registerObject(&quot;trgRepairToOperational&quot;, trgRepairToOperational);&#xA;ruleresult.registerObject(&quot;srcRegion&quot;, srcRegion);&#xA;ruleresult.registerObject(&quot;trgOperational&quot;, trgOperational);&#xA;ruleresult.registerObject(&quot;trgFailed&quot;, trgFailed);&#xA;ruleresult.registerObject(&quot;sensorOperationalCoor&quot;, sensorOperationalCoor);&#xA;ruleresult.registerObject(&quot;trgPetrinet&quot;, trgPetrinet);&#xA;ruleresult.registerObject(&quot;srcContainer&quot;, srcContainer);&#xA;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Sensor/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;srcSensor&quot;).eClass()).equals(&quot;railway.Sensor.&quot;);">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Sensor/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredSwitch/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;srcSwitchPosition&quot;, srcSwitchPosition);&#xA;match.registerObject(&quot;srcContainer&quot;, srcContainer);&#xA;match.registerObject(&quot;srcRoute&quot;, srcRoute);&#xA;match.registerObject(&quot;srcSwitch&quot;, srcSwitch);&#xA;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredSwitch/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredSwitch/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;trgPetrinet&quot;,trgPetrinet);&#xA;isApplicableMatch.registerObject(&quot;trgRouteFailed&quot;,trgRouteFailed);&#xA;isApplicableMatch.registerObject(&quot;trgSwitchFailed&quot;,trgSwitchFailed);&#xA;isApplicableMatch.registerObject(&quot;trgSwitchOperational&quot;,trgSwitchOperational);&#xA;isApplicableMatch.registerObject(&quot;switchOperationalCorr&quot;,switchOperationalCorr);&#xA;isApplicableMatch.registerObject(&quot;routeRepairCorr&quot;,routeRepairCorr);&#xA;isApplicableMatch.registerObject(&quot;containerCorr&quot;,containerCorr);&#xA;isApplicableMatch.registerObject(&quot;switchFailedCorr&quot;,switchFailedCorr);&#xA;isApplicableMatch.registerObject(&quot;trgRouteOperational&quot;,trgRouteOperational);&#xA;isApplicableMatch.registerObject(&quot;routeFailedCorr&quot;,routeFailedCorr);&#xA;isApplicableMatch.registerObject(&quot;routeOperationalCorr&quot;,routeOperationalCorr);&#xA;isApplicableMatch.registerObject(&quot;srcSwitchPosition&quot;,srcSwitchPosition);&#xA;isApplicableMatch.registerObject(&quot;srcContainer&quot;,srcContainer);&#xA;isApplicableMatch.registerObject(&quot;srcRoute&quot;,srcRoute);&#xA;isApplicableMatch.registerObject(&quot;trgRouteRepair&quot;,trgRouteRepair);&#xA;isApplicableMatch.registerObject(&quot;srcSwitch&quot;,srcSwitch);&#xA;return csp;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredSwitch/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredSwitch/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;trgPetrinet&quot;, trgPetrinet);&#xA;ruleresult.registerObject(&quot;trgSwitchFailedToRouteFail&quot;, trgSwitchFailedToRouteFail);&#xA;ruleresult.registerObject(&quot;trgRouteFailed&quot;, trgRouteFailed);&#xA;ruleresult.registerObject(&quot;trgSwitchFailed&quot;, trgSwitchFailed);&#xA;ruleresult.registerObject(&quot;trgSwitchOperationalToRouteRepair&quot;, trgSwitchOperationalToRouteRepair);&#xA;ruleresult.registerObject(&quot;trgRouteFailToSwitchFailed&quot;, trgRouteFailToSwitchFailed);&#xA;ruleresult.registerObject(&quot;trgSwitchOperational&quot;, trgSwitchOperational);&#xA;ruleresult.registerObject(&quot;switchOperationalCorr&quot;, switchOperationalCorr);&#xA;ruleresult.registerObject(&quot;trgRouteFail&quot;, trgRouteFail);&#xA;ruleresult.registerObject(&quot;routeRepairCorr&quot;, routeRepairCorr);&#xA;ruleresult.registerObject(&quot;containerCorr&quot;, containerCorr);&#xA;ruleresult.registerObject(&quot;switchFailedCorr&quot;, switchFailedCorr);&#xA;ruleresult.registerObject(&quot;trgRouteOperational&quot;, trgRouteOperational);&#xA;ruleresult.registerObject(&quot;routeFailedCorr&quot;, routeFailedCorr);&#xA;ruleresult.registerObject(&quot;routeOperationalCorr&quot;, routeOperationalCorr);&#xA;ruleresult.registerObject(&quot;trgRouteRepairToSwitchOperational&quot;, trgRouteRepairToSwitchOperational);&#xA;ruleresult.registerObject(&quot;trgRouteFailToRouteFailed&quot;, trgRouteFailToRouteFailed);&#xA;ruleresult.registerObject(&quot;srcSwitchPosition&quot;, srcSwitchPosition);&#xA;ruleresult.registerObject(&quot;trgRouteOperationalToRouteFail&quot;, trgRouteOperationalToRouteFail);&#xA;ruleresult.registerObject(&quot;srcContainer&quot;, srcContainer);&#xA;ruleresult.registerObject(&quot;srcRoute&quot;, srcRoute);&#xA;ruleresult.registerObject(&quot;trgRouteRepair&quot;, trgRouteRepair);&#xA;ruleresult.registerObject(&quot;srcSwitch&quot;, srcSwitch);&#xA;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredSwitch/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredSwitch/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredSensor/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;srcSensor&quot;, srcSensor);&#xA;match.registerObject(&quot;srcRoute&quot;, srcRoute);&#xA;match.registerObject(&quot;srcContainer&quot;, srcContainer);&#xA;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredSensor/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredSensor/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;trgPetrinet&quot;,trgPetrinet);&#xA;isApplicableMatch.registerObject(&quot;trgRouteOperational&quot;,trgRouteOperational);&#xA;isApplicableMatch.registerObject(&quot;trgSensorFailed&quot;,trgSensorFailed);&#xA;isApplicableMatch.registerObject(&quot;routeFailedCorr&quot;,routeFailedCorr);&#xA;isApplicableMatch.registerObject(&quot;routeRepairCorr&quot;,routeRepairCorr);&#xA;isApplicableMatch.registerObject(&quot;sensorFailedCorr&quot;,sensorFailedCorr);&#xA;isApplicableMatch.registerObject(&quot;srcSensor&quot;,srcSensor);&#xA;isApplicableMatch.registerObject(&quot;srcRoute&quot;,srcRoute);&#xA;isApplicableMatch.registerObject(&quot;sensorOperationalCorr&quot;,sensorOperationalCorr);&#xA;isApplicableMatch.registerObject(&quot;trgRouteFailed&quot;,trgRouteFailed);&#xA;isApplicableMatch.registerObject(&quot;containerCorr&quot;,containerCorr);&#xA;isApplicableMatch.registerObject(&quot;routeOperationalCorr&quot;,routeOperationalCorr);&#xA;isApplicableMatch.registerObject(&quot;trgRouteRepair&quot;,trgRouteRepair);&#xA;isApplicableMatch.registerObject(&quot;srcContainer&quot;,srcContainer);&#xA;isApplicableMatch.registerObject(&quot;trgSensorOperational&quot;,trgSensorOperational);&#xA;return csp;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredSensor/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredSensor/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;trgPetrinet&quot;, trgPetrinet);&#xA;ruleresult.registerObject(&quot;trgRouteOperational&quot;, trgRouteOperational);&#xA;ruleresult.registerObject(&quot;trgSensorFailed&quot;, trgSensorFailed);&#xA;ruleresult.registerObject(&quot;routeFailedCorr&quot;, routeFailedCorr);&#xA;ruleresult.registerObject(&quot;routeRepairCorr&quot;, routeRepairCorr);&#xA;ruleresult.registerObject(&quot;sensorFailedCorr&quot;, sensorFailedCorr);&#xA;ruleresult.registerObject(&quot;srcSensor&quot;, srcSensor);&#xA;ruleresult.registerObject(&quot;srcRoute&quot;, srcRoute);&#xA;ruleresult.registerObject(&quot;sensorOperationalCorr&quot;, sensorOperationalCorr);&#xA;ruleresult.registerObject(&quot;trgRouteFail&quot;, trgRouteFail);&#xA;ruleresult.registerObject(&quot;trgRouteFailed&quot;, trgRouteFailed);&#xA;ruleresult.registerObject(&quot;trgRouteOperationalToRouteFail&quot;, trgRouteOperationalToRouteFail);&#xA;ruleresult.registerObject(&quot;trgSensorFailedToRouteFail&quot;, trgSensorFailedToRouteFail);&#xA;ruleresult.registerObject(&quot;containerCorr&quot;, containerCorr);&#xA;ruleresult.registerObject(&quot;trgRouteFailToSensorFailed&quot;, trgRouteFailToSensorFailed);&#xA;ruleresult.registerObject(&quot;trgSensorOperationalToRouteRepair&quot;, trgSensorOperationalToRouteRepair);&#xA;ruleresult.registerObject(&quot;routeOperationalCorr&quot;, routeOperationalCorr);&#xA;ruleresult.registerObject(&quot;trgRouteRepairToSensorOperational&quot;, trgRouteRepairToSensorOperational);&#xA;ruleresult.registerObject(&quot;trgRouteFailToRouteFailed&quot;, trgRouteFailToRouteFailed);&#xA;ruleresult.registerObject(&quot;trgRouteRepair&quot;, trgRouteRepair);&#xA;ruleresult.registerObject(&quot;srcContainer&quot;, srcContainer);&#xA;ruleresult.registerObject(&quot;trgSensorOperational&quot;, trgSensorOperational);&#xA;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredSensor/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredSensor/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Segment/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;srcSegment&quot;, srcSegment);&#xA;match.registerObject(&quot;srcRegion&quot;, srcRegion);&#xA;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Segment/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Segment/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;srcSegment&quot;,srcSegment);&#xA;isApplicableMatch.registerObject(&quot;srcRegion&quot;,srcRegion);&#xA;return csp;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Segment/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Segment/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;srcSegment&quot;, srcSegment);&#xA;ruleresult.registerObject(&quot;srcRegion&quot;, srcRegion);&#xA;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Segment/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;srcSegment&quot;).eClass()).equals(&quot;railway.Segment.&quot;);">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Segment/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredEntrySemaphore/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;srcContainer&quot;, srcContainer);&#xA;match.registerObject(&quot;srcSemaphore&quot;, srcSemaphore);&#xA;match.registerObject(&quot;srcRoute&quot;, srcRoute);&#xA;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredEntrySemaphore/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredEntrySemaphore/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;routeRepairCorr&quot;,routeRepairCorr);&#xA;isApplicableMatch.registerObject(&quot;trgPetrinet&quot;,trgPetrinet);&#xA;isApplicableMatch.registerObject(&quot;routeOperationalCorr&quot;,routeOperationalCorr);&#xA;isApplicableMatch.registerObject(&quot;routeFailedCorr&quot;,routeFailedCorr);&#xA;isApplicableMatch.registerObject(&quot;srcContainer&quot;,srcContainer);&#xA;isApplicableMatch.registerObject(&quot;trgRouteRepair&quot;,trgRouteRepair);&#xA;isApplicableMatch.registerObject(&quot;trgSemaphoreFailed&quot;,trgSemaphoreFailed);&#xA;isApplicableMatch.registerObject(&quot;semaphoreOperationalCorr&quot;,semaphoreOperationalCorr);&#xA;isApplicableMatch.registerObject(&quot;trgSemaphoreOperational&quot;,trgSemaphoreOperational);&#xA;isApplicableMatch.registerObject(&quot;semaphoreFailedCorr&quot;,semaphoreFailedCorr);&#xA;isApplicableMatch.registerObject(&quot;containerCorr&quot;,containerCorr);&#xA;isApplicableMatch.registerObject(&quot;trgRouteFailed&quot;,trgRouteFailed);&#xA;isApplicableMatch.registerObject(&quot;srcSemaphore&quot;,srcSemaphore);&#xA;isApplicableMatch.registerObject(&quot;srcRoute&quot;,srcRoute);&#xA;isApplicableMatch.registerObject(&quot;trgRouteOperational&quot;,trgRouteOperational);&#xA;return csp;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredEntrySemaphore/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredEntrySemaphore/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;trgRouteRepairToSemaphoreOperational&quot;, trgRouteRepairToSemaphoreOperational);&#xA;ruleresult.registerObject(&quot;routeRepairCorr&quot;, routeRepairCorr);&#xA;ruleresult.registerObject(&quot;trgPetrinet&quot;, trgPetrinet);&#xA;ruleresult.registerObject(&quot;routeOperationalCorr&quot;, routeOperationalCorr);&#xA;ruleresult.registerObject(&quot;routeFailedCorr&quot;, routeFailedCorr);&#xA;ruleresult.registerObject(&quot;trgRouteOperationalToRouteFail&quot;, trgRouteOperationalToRouteFail);&#xA;ruleresult.registerObject(&quot;srcContainer&quot;, srcContainer);&#xA;ruleresult.registerObject(&quot;trgSemaphoreOperationalToRouteRepair&quot;, trgSemaphoreOperationalToRouteRepair);&#xA;ruleresult.registerObject(&quot;trgRouteRepair&quot;, trgRouteRepair);&#xA;ruleresult.registerObject(&quot;trgSemaphoreFailed&quot;, trgSemaphoreFailed);&#xA;ruleresult.registerObject(&quot;trgRouteFailToSemaphoreFailed&quot;, trgRouteFailToSemaphoreFailed);&#xA;ruleresult.registerObject(&quot;semaphoreOperationalCorr&quot;, semaphoreOperationalCorr);&#xA;ruleresult.registerObject(&quot;trgSemaphoreOperational&quot;, trgSemaphoreOperational);&#xA;ruleresult.registerObject(&quot;semaphoreFailedCorr&quot;, semaphoreFailedCorr);&#xA;ruleresult.registerObject(&quot;trgSemaphoreFailedToRouteFail&quot;, trgSemaphoreFailedToRouteFail);&#xA;ruleresult.registerObject(&quot;containerCorr&quot;, containerCorr);&#xA;ruleresult.registerObject(&quot;trgRouteFailToRouteFailed&quot;, trgRouteFailToRouteFailed);&#xA;ruleresult.registerObject(&quot;trgRouteFail&quot;, trgRouteFail);&#xA;ruleresult.registerObject(&quot;trgRouteFailed&quot;, trgRouteFailed);&#xA;ruleresult.registerObject(&quot;srcSemaphore&quot;, srcSemaphore);&#xA;ruleresult.registerObject(&quot;srcRoute&quot;, srcRoute);&#xA;ruleresult.registerObject(&quot;trgRouteOperational&quot;, trgRouteOperational);&#xA;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredEntrySemaphore/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredEntrySemaphore/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/SensorMonitors/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;srcTrackElement&quot;, srcTrackElement);&#xA;match.registerObject(&quot;srcSensor&quot;, srcSensor);&#xA;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/SensorMonitors/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/SensorMonitors/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;srcTrackElement&quot;,srcTrackElement);&#xA;isApplicableMatch.registerObject(&quot;srcSensor&quot;,srcSensor);&#xA;return csp;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/SensorMonitors/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/SensorMonitors/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;srcTrackElement&quot;, srcTrackElement);&#xA;ruleresult.registerObject(&quot;srcSensor&quot;, srcSensor);&#xA;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/SensorMonitors/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/SensorMonitors/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/TrackElementConnectsTo/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;srcTrackElement2&quot;, srcTrackElement2);&#xA;match.registerObject(&quot;srcTrackElement1&quot;, srcTrackElement1);&#xA;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/TrackElementConnectsTo/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/TrackElementConnectsTo/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;srcTrackElement2&quot;,srcTrackElement2);&#xA;isApplicableMatch.registerObject(&quot;srcTrackElement1&quot;,srcTrackElement1);&#xA;return csp;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/TrackElementConnectsTo/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/TrackElementConnectsTo/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;srcTrackElement2&quot;, srcTrackElement2);&#xA;ruleresult.registerObject(&quot;srcTrackElement1&quot;, srcTrackElement1);&#xA;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/TrackElementConnectsTo/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/TrackElementConnectsTo/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredExitSemaphore/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;srcSemaphore&quot;, srcSemaphore);&#xA;match.registerObject(&quot;srcRoute&quot;, srcRoute);&#xA;match.registerObject(&quot;srcContainer&quot;, srcContainer);&#xA;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredExitSemaphore/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredExitSemaphore/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;containerCorr&quot;,containerCorr);&#xA;isApplicableMatch.registerObject(&quot;routeOperationalCorr&quot;,routeOperationalCorr);&#xA;isApplicableMatch.registerObject(&quot;routeFailedCorr&quot;,routeFailedCorr);&#xA;isApplicableMatch.registerObject(&quot;trgSemaphoreOperational&quot;,trgSemaphoreOperational);&#xA;isApplicableMatch.registerObject(&quot;trgRouteRepair&quot;,trgRouteRepair);&#xA;isApplicableMatch.registerObject(&quot;srcSemaphore&quot;,srcSemaphore);&#xA;isApplicableMatch.registerObject(&quot;trgRouteOperational&quot;,trgRouteOperational);&#xA;isApplicableMatch.registerObject(&quot;trgRouteFailed&quot;,trgRouteFailed);&#xA;isApplicableMatch.registerObject(&quot;semaphoreFailedCorr&quot;,semaphoreFailedCorr);&#xA;isApplicableMatch.registerObject(&quot;routeRepairCorr&quot;,routeRepairCorr);&#xA;isApplicableMatch.registerObject(&quot;semaphoreOperationalCorr&quot;,semaphoreOperationalCorr);&#xA;isApplicableMatch.registerObject(&quot;trgSemaphoreFailed&quot;,trgSemaphoreFailed);&#xA;isApplicableMatch.registerObject(&quot;srcRoute&quot;,srcRoute);&#xA;isApplicableMatch.registerObject(&quot;trgPetrinet&quot;,trgPetrinet);&#xA;isApplicableMatch.registerObject(&quot;srcContainer&quot;,srcContainer);&#xA;return csp;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredExitSemaphore/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredExitSemaphore/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;containerCorr&quot;, containerCorr);&#xA;ruleresult.registerObject(&quot;trgSemaphoreOperationalToRouteRepair&quot;, trgSemaphoreOperationalToRouteRepair);&#xA;ruleresult.registerObject(&quot;trgRouteOperationalToRouteFail&quot;, trgRouteOperationalToRouteFail);&#xA;ruleresult.registerObject(&quot;routeOperationalCorr&quot;, routeOperationalCorr);&#xA;ruleresult.registerObject(&quot;routeFailedCorr&quot;, routeFailedCorr);&#xA;ruleresult.registerObject(&quot;trgSemaphoreOperational&quot;, trgSemaphoreOperational);&#xA;ruleresult.registerObject(&quot;trgRouteRepair&quot;, trgRouteRepair);&#xA;ruleresult.registerObject(&quot;trgRouteFailToSemaphoreFailed&quot;, trgRouteFailToSemaphoreFailed);&#xA;ruleresult.registerObject(&quot;trgSemaphoreFailedToRouteFail&quot;, trgSemaphoreFailedToRouteFail);&#xA;ruleresult.registerObject(&quot;trgRouteFail&quot;, trgRouteFail);&#xA;ruleresult.registerObject(&quot;srcSemaphore&quot;, srcSemaphore);&#xA;ruleresult.registerObject(&quot;trgRouteOperational&quot;, trgRouteOperational);&#xA;ruleresult.registerObject(&quot;trgRouteFailed&quot;, trgRouteFailed);&#xA;ruleresult.registerObject(&quot;semaphoreFailedCorr&quot;, semaphoreFailedCorr);&#xA;ruleresult.registerObject(&quot;routeRepairCorr&quot;, routeRepairCorr);&#xA;ruleresult.registerObject(&quot;semaphoreOperationalCorr&quot;, semaphoreOperationalCorr);&#xA;ruleresult.registerObject(&quot;trgSemaphoreFailed&quot;, trgSemaphoreFailed);&#xA;ruleresult.registerObject(&quot;srcRoute&quot;, srcRoute);&#xA;ruleresult.registerObject(&quot;trgRouteRepairToSemaphoreOperational&quot;, trgRouteRepairToSemaphoreOperational);&#xA;ruleresult.registerObject(&quot;trgPetrinet&quot;, trgPetrinet);&#xA;ruleresult.registerObject(&quot;trgRouteFailToRouteFailed&quot;, trgRouteFailToRouteFailed);&#xA;ruleresult.registerObject(&quot;srcContainer&quot;, srcContainer);&#xA;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredExitSemaphore/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredExitSemaphore/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;Route&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgOperational&quot;, &quot;tokens&quot;, 1, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgFailed&quot;, &quot;tokens&quot;, 0, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgFailedToRepair&quot;, &quot;kind&quot;, ArcKind.INPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgRepairToOperational&quot;, &quot;kind&quot;, ArcKind.OUTPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Route/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;Region&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Region/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;Switch&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgFailedToRepair&quot;, &quot;kind&quot;, ArcKind.INPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgRepairToOperational&quot;, &quot;kind&quot;, ArcKind.OUTPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgFailToFailed&quot;, &quot;kind&quot;, ArcKind.OUTPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgOperationToFail&quot;, &quot;kind&quot;, ArcKind.INPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_trgOperational_tokens = CSPFactoryHelper.eINSTANCE.createVariable(&quot;trgOperational&quot;, true, csp);&#xA;var_trgOperational_tokens.setValue(__helper.getValue(&quot;trgOperational&quot;, &quot;tokens&quot;));&#xA;var_trgOperational_tokens.setType(&quot;int&quot;);&#xA;&#xA;Variable var_srcSwitch_currentPosition = CSPFactoryHelper.eINSTANCE.createVariable(&quot;srcSwitch&quot;, true, csp);&#xA;var_srcSwitch_currentPosition.setValue(__helper.getValue(&quot;srcSwitch&quot;, &quot;currentPosition&quot;));&#xA;var_srcSwitch_currentPosition.setType(&quot;railway.Position&quot;);&#xA;&#xA;Variable var_trgFailed_tokens = CSPFactoryHelper.eINSTANCE.createVariable(&quot;trgFailed&quot;, true, csp);&#xA;var_trgFailed_tokens.setValue(__helper.getValue(&quot;trgFailed&quot;, &quot;tokens&quot;));&#xA;var_trgFailed_tokens.setType(&quot;int&quot;);&#xA;&#xA;PositionToMarking positionToMarking0 = new PositionToMarking();&#xA;csp.getConstraints().add(positionToMarking0);&#xA;&#xA;positionToMarking0.setRuleName(&quot;Switch&quot;);&#xA;positionToMarking0.solve(var_srcSwitch_currentPosition,var_trgOperational_tokens,var_trgFailed_tokens);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_trgOperational_tokens.setBound(false);&#xA;&#x9;var_trgFailed_tokens.setBound(false);&#xA;&#x9;positionToMarking0.solve(var_srcSwitch_currentPosition,var_trgOperational_tokens,var_trgFailed_tokens);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;trgOperational&quot;, &quot;tokens&quot;, var_trgOperational_tokens.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;trgFailed&quot;, &quot;tokens&quot;, var_trgFailed_tokens.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Switch/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;RailwayContainer&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RailwayContainer/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;SwitchPosition&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/SwitchPosition/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;Semaphore&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgFailedToRepair&quot;, &quot;kind&quot;, ArcKind.INPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgOperationToFail&quot;, &quot;kind&quot;, ArcKind.INPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgRepairToOperational&quot;, &quot;kind&quot;, ArcKind.OUTPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgFailToFailed&quot;, &quot;kind&quot;, ArcKind.OUTPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_trgOperational_tokens = CSPFactoryHelper.eINSTANCE.createVariable(&quot;trgOperational&quot;, true, csp);&#xA;var_trgOperational_tokens.setValue(__helper.getValue(&quot;trgOperational&quot;, &quot;tokens&quot;));&#xA;var_trgOperational_tokens.setType(&quot;int&quot;);&#xA;&#xA;Variable var_srcSemaphore_signal = CSPFactoryHelper.eINSTANCE.createVariable(&quot;srcSemaphore&quot;, true, csp);&#xA;var_srcSemaphore_signal.setValue(__helper.getValue(&quot;srcSemaphore&quot;, &quot;signal&quot;));&#xA;var_srcSemaphore_signal.setType(&quot;railway.Signal&quot;);&#xA;&#xA;Variable var_trgFailed_tokens = CSPFactoryHelper.eINSTANCE.createVariable(&quot;trgFailed&quot;, true, csp);&#xA;var_trgFailed_tokens.setValue(__helper.getValue(&quot;trgFailed&quot;, &quot;tokens&quot;));&#xA;var_trgFailed_tokens.setType(&quot;int&quot;);&#xA;&#xA;SignalToMarking signalToMarking0 = new SignalToMarking();&#xA;csp.getConstraints().add(signalToMarking0);&#xA;&#xA;signalToMarking0.setRuleName(&quot;Semaphore&quot;);&#xA;signalToMarking0.solve(var_srcSemaphore_signal,var_trgOperational_tokens,var_trgFailed_tokens);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_trgOperational_tokens.setBound(false);&#xA;&#x9;var_trgFailed_tokens.setBound(false);&#xA;&#x9;signalToMarking0.solve(var_srcSemaphore_signal,var_trgOperational_tokens,var_trgFailed_tokens);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;trgOperational&quot;, &quot;tokens&quot;, var_trgOperational_tokens.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;trgFailed&quot;, &quot;tokens&quot;, var_trgFailed_tokens.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Semaphore/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;Sensor&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgFailToFailed&quot;, &quot;kind&quot;, ArcKind.OUTPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgOperationToFail&quot;, &quot;kind&quot;, ArcKind.INPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgFailedToRepair&quot;, &quot;kind&quot;, ArcKind.INPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgRepairToOperational&quot;, &quot;kind&quot;, ArcKind.OUTPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgOperational&quot;, &quot;tokens&quot;, 1, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgFailed&quot;, &quot;tokens&quot;, 0, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Sensor/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;RequiredSwitch&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgSwitchFailedToRouteFail&quot;, &quot;kind&quot;, ArcKind.INPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgSwitchOperationalToRouteRepair&quot;, &quot;kind&quot;, ArcKind.INPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgRouteFailToSwitchFailed&quot;, &quot;kind&quot;, ArcKind.OUTPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgRouteRepairToSwitchOperational&quot;, &quot;kind&quot;, ArcKind.OUTPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgRouteFailToRouteFailed&quot;, &quot;kind&quot;, ArcKind.OUTPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgRouteOperationalToRouteFail&quot;, &quot;kind&quot;, ArcKind.INPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredSwitch/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;RequiredSensor&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgRouteOperationalToRouteFail&quot;, &quot;kind&quot;, ArcKind.INPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgSensorFailedToRouteFail&quot;, &quot;kind&quot;, ArcKind.INPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgRouteFailToSensorFailed&quot;, &quot;kind&quot;, ArcKind.OUTPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgSensorOperationalToRouteRepair&quot;, &quot;kind&quot;, ArcKind.INPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgRouteRepairToSensorOperational&quot;, &quot;kind&quot;, ArcKind.OUTPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgRouteFailToRouteFailed&quot;, &quot;kind&quot;, ArcKind.OUTPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredSensor/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;Segment&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/Segment/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;RequiredEntrySemaphore&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgRouteRepairToSemaphoreOperational&quot;, &quot;kind&quot;, ArcKind.OUTPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgRouteOperationalToRouteFail&quot;, &quot;kind&quot;, ArcKind.INPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgSemaphoreOperationalToRouteRepair&quot;, &quot;kind&quot;, ArcKind.INPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgRouteFailToSemaphoreFailed&quot;, &quot;kind&quot;, ArcKind.OUTPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgSemaphoreFailedToRouteFail&quot;, &quot;kind&quot;, ArcKind.INPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgRouteFailToRouteFailed&quot;, &quot;kind&quot;, ArcKind.OUTPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredEntrySemaphore/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;SensorMonitors&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/SensorMonitors/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;TrackElementConnectsTo&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/TrackElementConnectsTo/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;RequiredExitSemaphore&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgSemaphoreOperationalToRouteRepair&quot;, &quot;kind&quot;, ArcKind.INPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgRouteOperationalToRouteFail&quot;, &quot;kind&quot;, ArcKind.INPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgRouteFailToSemaphoreFailed&quot;, &quot;kind&quot;, ArcKind.OUTPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgSemaphoreFailedToRouteFail&quot;, &quot;kind&quot;, ArcKind.INPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgRouteRepairToSemaphoreOperational&quot;, &quot;kind&quot;, ArcKind.OUTPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;trgRouteFailToRouteFailed&quot;, &quot;kind&quot;, ArcKind.OUTPUT, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.tgg.stochasticpetrinet/model/Stochasticpetrinet.ecore#//Rules/RequiredExitSemaphore/checkAttributes_FWD"/>
  </compilerInjectionEntries>
</sdmUtil:CompilerInjection>
