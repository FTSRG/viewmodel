/********************************************************************************
 * Copyright (c) 2018 Contributors to the ViewModel project
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * SPDX-License-Identifier: EPL-1.0
 ********************************************************************************/
package hu.bme.mit.inf.viewmodel.benchmarks.queries.stochasticpetrinet

import "platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.models/model/railway.ecore"

pattern railwayContainer(Container : RailwayContainer) {
	RailwayContainer(Container);
}

pattern route(Container : RailwayContainer, Route : Route) {
	RailwayContainer.routes(Container, Route);
}

pattern failedRoute(Container : RailwayContainer, Route : Route) {
	find routeRequiresSwitch(Container, Route, Switch);
	find failedSwitch(Container, Switch);
} or {
	find routeRequiresSemaphore(Container, Route, Semaphore);
	find failedSemaphore(Container, Semaphore);
}

pattern operationalRoute(Container : RailwayContainer, Route : Route) {
	find route(Container, Route);
	neg find failedRoute(Container, Route);
}

pattern
railwayElementWithFailureModel(Container : RailwayContainer, Element : RailwayElement) {
	find railwaySwitch(Container, Element);
} or {
	find railwaySemaphore(Container, Element);
} or {
	find railwaySensor(Container, Element);
}

pattern
failedRailwayElementWithFailureModel(Container : RailwayContainer, Element : RailwayElement) {
	find failedSwitch(Container, Element);
} or {
	find failedSemaphore(Container, Element);
}

pattern
operationalRailwayElementWithFailureModel(Container : RailwayContainer, Element : RailwayElement) {
	find railwaySwitch(Container, Element);
	neg find failedSwitch(Container, Element);
} or {
	find railwaySemaphore(Container, Element);
	neg find failedSemaphore(Container, Element);
} or {
	find railwaySensor(Container, Element);
}

pattern
routeRequiresElement(Container : RailwayContainer, Route : Route, Element : RailwayElement) {
	find routeRequiresSwitch(Container, Route, Element);
} or {
	find routeRequiresSemaphore(Container, Route, Element);
} or {
	find routeRequiresSensor(Container, Route, Element);
}

pattern railwaySwitch(Container : RailwayContainer, Switch : Switch) {
	RailwayContainer.regions.elements(Container, Switch);
}

private pattern failedSwitch(Container : RailwayContainer, Switch : Switch) {
	find railwaySwitch(Container, Switch);
	Switch.currentPosition(Switch, Position::FAILURE);
}

 pattern
routeRequiresSwitch(Container : RailwayContainer, Route : Route, Switch : Switch) {
	find route(Container, Route);
	Route.follows(Route, Position);
	Switch.positions(Switch, Position);
}

pattern railwaySemaphore(Container : RailwayContainer, Semaphore : Semaphore) {
	RailwayContainer.regions.elements(Container, Segment);
	Segment.semaphores(Segment, Semaphore);
}

private pattern
failedSemaphore(Container : RailwayContainer, Semaphore : Semaphore) {
	find railwaySemaphore(Container, Semaphore);
	Semaphore.signal(Semaphore, Signal::FAILURE);
}

private pattern
routeRequiresSemaphore(Container : RailwayContainer, Route : Route, Semaphore : Semaphore) {
	find route(Container, Route);
	Route.entry(Route, Semaphore);
} or {
	find route(Container, Route);
	Route.exit(Route, Semaphore);
}

pattern railwaySensor(Container : RailwayContainer, Sensor : Sensor) {
	RailwayContainer.regions.sensors(Container, Sensor);
}

private pattern
routeRequiresSensor(Container : RailwayContainer, Route : Route, Sensor : Sensor) {
	find route(Container, Route);
	Route.requires(Route, Sensor);
}
