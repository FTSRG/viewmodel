/********************************************************************************
 * Copyright (c) 2018 Contributors to the ViewModel project
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * SPDX-License-Identifier: EPL-1.0
 ********************************************************************************/
package hu.bme.mit.inf.viewmodel.benchmarks.queries.stochasticpetrinet

import "platform:/plugin/hu.bme.mit.inf.viewmodel.benchmarks.models/model/stochasticpetrinet.ecore"

@Template
pattern createPetriNet(Net : PetriNet) {
	PetriNet(Net);
}

@Template
pattern createRoute(Net : PetriNet, Operational : Place, Failed : Place, Repair : Transition) {
	find createPlace(Net, Operational);
	find createPlace(Net, Failed);
	PetriNet.nodes(Net, Repair);
	find createArc(Repair, Failed, ArcKind::INPUT);
	find createArc(Repair, Operational, ArcKind::OUTPUT);
}

@Template
pattern setInitialMarking(Place : Place) {
	Place.tokens(Place, 1);
}

@Template
pattern connectRequiredElement(
	Net : PetriNet, SlaveUp : Place, SlaveDown : Place,
	MasterUp : Place, MasterDown : Place, MasterRepair : ImmediateTransition
) {
	find createImmediateTransition(Net, MasterFail);
	find createArc(MasterFail, SlaveDown, ArcKind::INPUT);
	find createArc(MasterFail, SlaveDown, ArcKind::OUTPUT);
	find createArc(MasterFail, MasterUp, ArcKind::INPUT);
	find createArc(MasterFail, MasterDown, ArcKind::OUTPUT);
	find createArc(MasterRepair, SlaveUp, ArcKind::INPUT);
	find createArc(MasterRepair, SlaveUp, ArcKind::OUTPUT);
}

@Template
pattern createFailureModel(
	Net : PetriNet, Operational : Place, Failed : Place
) {
	find createPlace(Net, Operational);
	find createPlace(Net, Failed);
	find createTimedTransition(Net, Fail);
	find createArc(Fail, Operational, ArcKind::INPUT);
	find createArc(Fail, Failed, ArcKind::OUTPUT);
	find createTimedTransition(Net, Repair);
	find createArc(Repair, Failed, ArcKind::INPUT);
	find createArc(Repair, Operational, ArcKind::OUTPUT);
}

@Template
pattern createPlace(Net : PetriNet, Place : Place) {
	PetriNet.nodes(Net, Place);
}

@Template
pattern createTransition(Net : PetriNet, Tran : Transition) {
	PetriNet.nodes(Net, Tran);
}

@Template
pattern createTimedTransition(Net : PetriNet, Tran : TimedTransition) {
	find createTransition(Net, Tran);
}

@Template
pattern createImmediateTransition(Net : PetriNet, Tran : ImmediateTransition) {
	find createTransition(Net, Tran);
}

@Template
pattern createArc(Tran : Transition, Place : Place, Kind : ArcKind) {
	Arc.transition(Arc, Tran);
	Arc.place(Arc, Place);
	Arc.kind(Arc, Kind);
}
