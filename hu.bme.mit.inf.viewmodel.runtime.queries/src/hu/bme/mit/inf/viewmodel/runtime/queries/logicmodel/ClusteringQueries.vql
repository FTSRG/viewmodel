package hu.bme.mit.inf.viewmodel.runtime.queries.logicmodel

import "http://inf.mit.bme.hu/emf/2017/LogicModel"
// Must not use "http://www.eclipse.org/emf/2002/Ecore",
// because Xcore already loads Ecore.ecore into the ResourceSet with a platform resource URI.
import "platform:/resource/org.eclipse.emf.ecore/model/Ecore.ecore"

pattern dirtyLogicModel(LogicModelId : EString) {
	find dirtyCluster(LogicModelId, _);
} or {
	find unusedCluster(LogicModelId, _);
}

pattern unusedCluster(LogicModelId : EString, Rep : Cluster) {
	LogicModel.logicModelId(Model, LogicModelId);
	LogicModel.clusters(Model, Rep);
	neg find representedVariable(Rep, _);
}

pattern dirtyCluster(LogicModelId : EString, Rep : Cluster) {
	LogicModel.logicModelId(Model, LogicModelId);
	LogicModel.clusters(Model, Rep);
	Cluster.state(Rep, ClusterState::DIRTY);
	find representedVariable(Rep, _);
}

pattern representedVariable(Rep : Cluster, Var : Variable) {
	Variable.cluster(Var, Rep);
}

pattern equivalenceConstraint(Left : Variable, Right : Variable) {
	EquivalenceConstraint.left(Constraint, Left);
	EquivalenceConstraint.right(Constraint, Right);
}

pattern anyEObjectConstantValue(Var : Variable, Value : EObject) {
	ConstantEObjectConstraint.variable(Const, Var);
	ConstantEObjectConstraint.value(Const, Value);
}

pattern anyJavaObjectConstantValue(Var : Variable, Value : EJavaObject) {
	ConstantJavaObjectConstraint.variable(Const, Var);
	ConstantJavaObjectConstraint.value(Const, Value);
}

pattern eObjectCluster(Model : LogicModel, Rep : Cluster, Value : EObject) {
	LogicModel.clusters(Model, Rep);
	find anyEObjectConstantValue(Var, Value);
	find representedVariable(Rep, Var);
}

pattern javaObjectCluster(Model : LogicModel, Rep : Cluster, Value : EJavaObject) {
	LogicModel.clusters(Model, Rep);
	find anyJavaObjectConstantValue(Var, Value);
	find representedVariable(Rep, Var);
}

pattern strongClusterRelation(LeftRep : Cluster, RightRep : Cluster, Rel : EStructuralFeature) {
	find clusterRelation(LeftRep, RightRep, Rel);
	find strongRelation(Rel);
}

pattern clusterRelation(LeftRep : Cluster, RightRep : Cluster, Rel : EStructuralFeature) {
	find representedVariable(LeftRep, Left);
	find representedVariable(RightRep, Right);
	find variableRelation(Left, Right, Rel);
} or {
	find representedVariable(LeftRep, Left);
	find representedVariable(RightRep, Right);
	find variableRelation(Right, Left, Opposite);
	EReference.eOpposite(Rel, Opposite);
}

private pattern variableRelation(Left : Variable, Right : Variable, Relation : EStructuralFeature) {
	RelationConstraint.left(Constraint, Left);
	RelationConstraint.right(Constraint, Right);
	RelationConstraint.targetRelation(Constraint, Relation);
}
