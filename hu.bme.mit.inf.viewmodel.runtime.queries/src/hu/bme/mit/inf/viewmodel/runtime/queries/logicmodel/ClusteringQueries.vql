package hu.bme.mit.inf.viewmodel.runtime.queries.logicmodel

import "http://inf.mit.bme.hu/emf/2017/LogicModel"
// Must not use "http://www.eclipse.org/emf/2002/Ecore",
// because Xcore already loads Ecore.ecore into the ResourceSet with a platform resource URI.
import "platform:/resource/org.eclipse.emf.ecore/model/Ecore.ecore"

pattern representedVariable(Rep : Variable, Var : Variable) {
	find representant(Rep);
	find equalVariables(Rep, Var);
}

pattern representant(Rep : Variable) {
	Variable.id(Rep, Id);
	Id == min find idOfEqualVariable(Rep, #);
} 

private pattern idOfEqualVariable(Var : Variable, Id : ELong) {
	find equalVariables(Var, Other);
	Variable.id(Other, Id);
}

private pattern equalVariables(Left : Variable, Right : Variable) {
	Left == Right;
} or {
	find equivalenceConstraint+(Left, Right);
}

private pattern equivalenceConstraint(Left : Variable, Right : Variable) {
	EquivalenceConstraint.left(Constraint, Left);
	EquivalenceConstraint.right(Constraint, Right);
} or {
	EquivalenceConstraint.left(Constraint, Right);
	EquivalenceConstraint.right(Constraint, Left);
} or {
	ConstantEObjectConstraint.variable(Const1, Left);
	ConstantEObjectConstraint.variable(Const2, Right);
	ConstantEObjectConstraint.value(Const1, Value);
	ConstantEObjectConstraint.value(Const2, Value);
} or {
	ConstantJavaObjectConstraint.variable(Const1, Left);
	ConstantJavaObjectConstraint.variable(Const2, Right);
	ConstantJavaObjectConstraint.value(Const1, Value);
	ConstantJavaObjectConstraint.value(Const2, Value);
}

pattern strongClusterRelation(LeftRep : Variable, RightRep : Variable, Rel : EStructuralFeature) {
	find clusterRelation(LeftRep, RightRep, Rel);
	find strongRelation(Rel);
}

pattern clusterRelation(LeftRep : Variable, RightRep : Variable, Rel : EStructuralFeature) {
	find representedVariable(LeftRep, Left);
	find representedVariable(RightRep, Right);
	find variableRelation(Left, Right, Rel);
}

private pattern variableRelation(Left : Variable, Right : Variable, Relation : EStructuralFeature) {
	RelationConstraint.left(Constraint, Left);
	RelationConstraint.right(Constraint, Right);
	RelationConstraint.targetRelation(Constraint, Relation);
} or {
	RelationConstraint.left(Constraint, Right);
	RelationConstraint.right(Constraint, Left);
	RelationConstraint.targetRelation(Constraint, Opposite);
	EReference.eOpposite(Opposite, Relation);
}
