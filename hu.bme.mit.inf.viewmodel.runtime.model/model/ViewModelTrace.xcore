@Ecore(nsPrefix="viewmodeltrace", nsURI="http://inf.mit.bme.hu/emf/2017/ViewModelTrace")
@GenModel(modelDirectory="/hu.bme.mit.inf.viewmodel.runtime.model/src-gen", prefix="ViewModelTrace",
	fileExtensions="viewmodeltrace", providerName="BME MIT FTSRG", operationReflection="false")
package hu.bme.mit.inf.viewmodel.runtime.model.viewmodeltrace

import hu.bme.mit.inf.viewmodel.runtime.model.logicmodel.Constraint
import hu.bme.mit.inf.viewmodel.runtime.model.logicmodel.LogicModel
import hu.bme.mit.inf.viewmodel.runtime.model.logicmodel.Variable
import java.util.Map$Entry
import org.eclipse.emf.ecore.EObject

class ViewModelTrace {
	String traceModelId
	refers LogicModel logicModel
	contains unordered Trace[] traces
}

class MatchArgumentTuple {
	contains unordered MatchArgument[] elements
	op String toString() {
		"{" + elements.join(", ") + "}"
	}
}

abstract class MatchArgument {
	String parameterName
}

class EObjectMatchArgument extends MatchArgument {
	refers EObject value
	op String toString() {
		parameterName + "=" + value
	}
}

class JavaObjectMatchArgument extends MatchArgument {
	Object value
	op String toString() {
		parameterName + "=" + value
	}
}

abstract class Trace {
	String traceName
	contains MatchArgumentTuple argumentTuple
}

class VariableInstantiationTrace extends Trace {
	contains unordered StringVariablePair[] variables
	op String toString() {
		traceName + argumentTuple + "\n\t" + variables.map[key + "=" + value].join(", ")
	}
}

class StringVariablePair wraps Entry {
	String key
	refers Variable value
}

class ConstraintTrace extends Trace {
	refers unordered Variable[] localVariables
	refers unordered Constraint[] constraints
	
	op String toString() {
		traceName + argumentTuple + "\n\tlocals: " + localVariables.join(", ") + constraints.map["\n\t" + it].join
	}
}
